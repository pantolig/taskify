openapi: 3.0.0
info:
  title: Trello Clone API
  version: 1.0.0
  description: API for a Trello-like application
servers:
  - url: http://localhost:3000/api
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string, minLength: 3, maxLength: 50 }
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
      responses:
        '201': { description: User registered }
        '400': { description: Bad request }
  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        '200': { description: Login successful }
        '400': { description: Invalid credentials }
  /users/me:
    get:
      summary: Get authenticated user profile
      security:
        - bearerAuth: []
      responses:
        '200': { description: User profile }
        '401': { description: Unauthorized }
        '404': { description: User not found }
    put:
      summary: Update authenticated user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string, minLength: 3, maxLength: 50 }
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
      responses:
        '200': { description: User updated }
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '404': { description: User not found }
    delete:
      summary: Delete authenticated user account
      security:
        - bearerAuth: []
      responses:
        '200': { description: User deleted }
        '401': { description: Unauthorized }
        '404': { description: User not found }
  /users:
    get:
      summary: Get list of users
      security:
        - bearerAuth: []
      responses:
        '200': { description: List of users }
        '401': { description: Unauthorized }
  /boards:
    post:
      summary: Create a board
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string, minLength: 1, maxLength: 100 }
                description: { type: string }
      responses:
        '201': { description: Board created }
        '401': { description: Unauthorized }
    get:
      summary: Get all boards
      security:
        - bearerAuth: []
      responses:
        '200': { description: List of boards }
        '401': { description: Unauthorized }
  /boards/{id}/members:
    post:
      summary: Add a member to a board
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id: { type: integer }
      responses:
        '201': { description: Member added }
        '400': { description: Bad request }
        '401': { description: Unauthorized }
  /attachments:
    post:
      summary: Upload an attachment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
                card_id: { type: integer }
      responses:
        '201': { description: Attachment uploaded }
        '400': { description: Bad request }
        '401': { description: Unauthorized }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT